name: Build

on:
  push:
    branches:
      - main
  pull_request_target:
    types: [opened, synchronize, reopened]

env:
  BUILD_TYPE: Release
  BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  approve:
    name: Approve
    if: github.event_name == 'pull_request_target'
    environment:
      name: Integrate Pull Request
    runs-on: ubuntu-latest
    steps:
      - name: Approve
        run: echo For security reasons, all pull requests need to be approved first before running any automated build CI.

  build_test_analyze:
    name: Build, Test and Analyze
    runs-on: ubuntu-latest
    needs: approve
    # Only run if the approve job succeeded or was skipped, as it continues on error
    if: ${{ always() && needs.approve.result == 'success' || needs.approve.result == 'skipped' }} 
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
          ref: ${{ github.event.pull_request.head.sha }} # Check out the code of the PR head
      - name: Set up Python 3.8 for gcovr
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: install gcovr 5.0
        run: |
          pip install gcovr==5.0 # 5.1 is not supported
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: "cpp"
      - name: Run build-wrapper
        run: |
          mkdir build
          cmake -S . -B build -DBUILD_EXAMPLES=ON -DBUILD_TESTING=ON -DCAN_DRIVER=SocketCAN
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config ${{ env.BUILD_TYPE }}
      - name: Run
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{ env.BUILD_TYPE }}
      - name: Collect coverage into one XML report
        run: |
          gcovr --sonarqube > coverage.xml
      - name: Run sonar-scanner
        if: "${{ env.SONAR_TOKEN != '' }}"
        run: |
          sonar-scanner \
            --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
            --define sonar.coverageReportPaths=coverage.xml
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"
